<?php/** * Created by PhpStorm. * User: yann * Date: 28/10/2017 * Time: 10:51 */namespace AppBundle\Service;use Symfony\Component\DependencyInjection\ContainerInterface;use Symfony\Component\HttpFoundation\File\UploadedFile;class UploadService{    /** @var ContainerInterface $container */    private $container = null;    private $baseUrl = 'http://localhost/';    private $baseFolder = '../web';    private $urlFolder = '/uploads';    /**     * @var int     */    public $jpeg_quality = 80;    public function __construct(ContainerInterface $container)    {        $this->container = $container;        $this->baseUrl = $this->container->getParameter('image_base_url');        $this->baseFolder = $this->container->getParameter('image_base_folder');        $this->urlFolder = $this->container->getParameter('image_folder_url');    }    public function upload(UploadedFile $file, $imageType, $id = null, $fileName = null)    {        $fileName = (null !== $fileName) ? $fileName . '.' . $file->guessExtension() : md5(uniqid()) . '.' . $file->guessExtension();        if (null === $id) {            $temp = $this->urlFolder . DIRECTORY_SEPARATOR . $imageType;            $targetMove = $this->baseFolder . DIRECTORY_SEPARATOR . $temp;            $resFileName = $this->baseUrl . DIRECTORY_SEPARATOR . $temp . DIRECTORY_SEPARATOR . $fileName;        } else {            $temp = $this->urlFolder . DIRECTORY_SEPARATOR . $imageType . DIRECTORY_SEPARATOR . $id;            $targetMove = $this->baseFolder . DIRECTORY_SEPARATOR . $temp;            $resFileName = $this->baseUrl . DIRECTORY_SEPARATOR . $temp . DIRECTORY_SEPARATOR . $fileName;        }        if (!file_exists($targetMove)) {            mkdir($targetMove, 0775, true);        }        $file->move(            $targetMove,            $fileName        );                unset($file, $temp, $targetMove, $fileName);        return $resFileName;    }    /**     * @param UploadedFile $file     * @param $slug     * @param string $directory     * @param string $imageType     * @param int $width     * @param int $height     * @return array|null     */    public function uploadImageResize(UploadedFile $file, $slug, $directory = 'media', $width = 200, $height = 200, $imageType = null)    {        $targetMove = $this->urlFolder . $directory . DIRECTORY_SEPARATOR . $slug . DIRECTORY_SEPARATOR;        @mkdir($this->baseFolder . $targetMove, 0700, true);        $fileName = ($imageType !== null) ? $slug . "_" . $imageType . "." . $file->guessExtension() : $slug . "." . $file->guessExtension();        $extension = $file->guessExtension();        $imageResource = null;        switch (strtolower($extension)) {            case 'jpeg':            case 'jpg':            case 'jpe':            case 'jfif':            case 'jif':            case 'jp2':            case 'j2k':            case 'jpf':            case 'jpx':            case 'jpm':            case 'mj2':                $imageResource = @imagecreatefromjpeg($file->getRealPath());                break;            case 'png':                $imageResource = @imagecreatefrompng($file->getRealPath());                break;            case 'gif':                $imageResource = @imagecreatefromgif($file->getRealPath());                break;            default:                $img_str = @file_get_contents($file->getRealPath());                if ($img_str)                    $imageResource = @imagecreatefromstring(@base64_decode($img_str));                break;        }        if (!$imageResource)            return null;        $imgDimension = getimagesize($file->getRealPath());        $imgWidth = $width;        $ratio = $imgWidth / $imgDimension[0];        $imgHeight = $imgDimension[1] * $ratio;        if ($imgHeight > $imgWidth) {            $imgHeight = $height;            $ratio = $imgHeight / $imgDimension[1];            $imgWidth = $imgDimension[0] * $ratio;        }        $imgDestination = imagecreatetruecolor($imgWidth, $imgHeight);        imagecopyresampled($imgDestination, $imageResource, 0, 0, 0, 0, $imgWidth, $imgHeight, $imgDimension[0], $imgDimension[1]);        if (in_array(strtolower($extension), array('jpeg', 'jpg', 'jpe', 'jfif', 'jif', 'jp2', 'j2k', 'jpf', 'jpx', 'jpm', 'mj2'))) {            $result = @imagejpeg($imgDestination, $this->baseFolder . $targetMove . $fileName, 100);//            die("imagejpeg")or die;        } elseif ($extension == 'png') {            $result = @imagepng($imgDestination, $this->baseFolder . $targetMove . $fileName);//            die("imagepng")or die;        } elseif ($extension == 'gif') {            $result = @imagegif($imgDestination, $this->baseFolder . $targetMove . $fileName, $this->jpeg_quality);//            die("imagegif")or die;        } else {            $result = @imagejpeg($imgDestination, $this->baseFolder . $targetMove . $fileName, $this->jpeg_quality);//            die("imagejpeg") or die;        }        if ($result === false)            return null;        imagedestroy($imgDestination);        imagedestroy($imageResource);        $resFileName = $this->baseUrl . $targetMove . $fileName;        return $resFileName;    }}